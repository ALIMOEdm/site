<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends EntityRepository
{
    public function getOneNews($vk_news_id, $vk_group_id, $checkDeleted = 1){
        $res = $this->createQueryBuilder('n')
            ->where('n.news_id=:vk_news_id AND vk_group.group_id=:vk_group_id')
            ->leftJoin('n.vk_group', 'vk_group')
            ->setParameter(':vk_news_id', $vk_news_id)
            ->setParameter(':vk_group_id', $vk_group_id)
            ;

        if($checkDeleted){
            $res->andWhere('n.deleted=:deleted')
                ->setParameter(':deleted', 0);
        }


        return $res->getQuery();
    }
    public function checkNewsExists($vk_news_id, $vk_group_id){
        $res = $this->getOneNews($vk_news_id, $vk_group_id, 0);
        $result = $res->getOneOrNullResult();
        if(!is_null($result)){
            return true;
        }else{
            return false;
        }
    }

    public function getNewsF(){
        $qb = $this->createQueryBuilder('n')
            ->select('n', 'vk_group', 'photos', 'COUNT(views.id) as cnt_views')
            ->leftJoin('n.vk_group', 'vk_group')
            ->leftJoin('n.photos', 'photos')
            ->leftJoin('n.category', 'category')
            ->leftJoin('n.views', 'views');
        return $qb;
    }

    public function getNews($theme, $photo_size = 3){
        $qb = $this->getNewsF();
        $qb->where('category.indentity=:theme AND n.news_vk_link<>\'\' AND photos.id IS NOT NULL AND photos.sizeInt>=:photo_size AND n.deleted=0')
            ->andWhere('n.news_title<>\'\' OR n.news_description<>\'\'')
            ->setParameter(':theme', $theme)
            ->setParameter(':photo_size', $photo_size)
            ->orderBy('n.news_date', 'DESC')
            ->groupBy('n.id');

        return $qb;
    }

    public function getNewsById($ids)
    {
        $qb_pictures = $this->getQueryBuilderForViewCounter();

        //AND photos.id IS NOT NULL
        $qb = $this->createQueryBuilder('n');
        $qb->leftJoin('n.vk_group', 'vk_group')
            ->leftJoin('n.photos', 'photos')
            ->leftJoin('n.category', 'category')
            ->andWhere('n.news_vk_link<>\'\'  AND n.deleted=0')
            ->andWhere('n.news_title<>\'\'')
            ->andWhere('vk_group.deleted=0')
            ->andWhere('category.indentity<>\'discount\'')
            ->andWhere($qb->expr()->in('n.id', $ids))
            ->orderBy('n.news_date', 'DESC');
        $qb->select(
            'partial n.{id,news_title,news_description,news_id,news_site_link,news_vk_link,news_date,slug}',
            'vk_group', 'photos', '('.$qb_pictures->getDQL().') as cnt_views');

        return $qb->getQuery()->execute();
    }


    public function getLatestNews($photo_size = 3, $limit = 3, $theme = ''){
        $qb = $this->getNewsF();
        $qb->where('n.news_vk_link<>\'\' AND photos.id IS NOT NULL AND photos.sizeInt>=:photo_size AND n.deleted=0')
            ->andWhere('n.news_title<>\'\' OR n.news_description<>\'\'')
            ->setParameter(':photo_size', $photo_size);
        if($theme){
            $qb->andWhere('vk_group.group_theme=:theme')
                ->setParameter(':theme', $theme);
        }
        $qb->orderBy('n.news_date', 'DESC')
            ->groupBy('n.id');

        $qb->setMaxResults($limit);

        $qb->select(
            'partial n.{id,news_title,news_description,news_id,news_site_link,news_vk_link,news_date,slug}',
            'vk_group', 'photos');

        return $qb->getQuery()->execute();
    }

    public function getNewsForYandexRSS($photo_size = 3, $limit = 3, $theme = ''){
        $qb = $this->getNewsF();
        $qb->select('partial n.{id,news_title,news_description,news_id,news_site_link,news_vk_link,news_date,slug,createdAt}', 'vk_group', 'photos', 'COUNT(views.id) as cnt_views');
        $qb->where('n.news_vk_link<>\'\' AND photos.id IS NOT NULL AND photos.sizeInt>=:photo_size AND n.deleted=0')
            ->andWhere('n.news_title<>\'\' AND n.news_description<>\'\' AND n.news_text_parsed<>\'\'')
            ->setParameter(':photo_size', $photo_size);
        if($theme){
            $qb->andWhere('vk_group.group_theme=:theme')
                ->setParameter(':theme', $theme);
        }
        $qb->orderBy('n.news_date', 'DESC')
            ->groupBy('n.id');

        $qb->setMaxResults($limit);

        return $qb->getQuery()->execute();
    }

    public function getNewsQueryByType($type, $limit = 0, $offset = 0,$date_start = '', $date_finish = '', array $groups = array(),  $is_need_result = false, $query_search = ''){
        $query = null;
        switch($type){
            case 'news':
                $qb = $this->getNews('news', 1);
                break;
            case 'news_sport':
                $qb = $this->getNews('news_sport', 1);
                break;
            case 'different':
                $qb = $this->getNews('different', 1);
                break;
            case 'traveling':
                $qb = $this->getNews('traveling', 1);
                break;
            case 'afisha':
                $qb = $this->getNews('afisha', 1);
                break;
            case 'animals':
                $qb = $this->getNews('animals', 1);
                break;
            case 'discount':
                $qb = $this->getNews('discount', 1);
                break;
        }

        if($limit){
            $qb->setMaxResults($limit);
        }

        if($offset){
            $qb->setFirstResult($offset);
        }


        if(count($groups)){
            $qb ->andWhere($qb->expr()->in('vk_group.id', $groups));
        }

        if($date_start){
            $qb ->andWhere('n.news_date_time>=:date_start')
                ->setParameter(':date_start', $date_start);
        }
        if($date_finish){
            $qb->andWhere('n.news_date_time<=:date_finish')
                ->setParameter(':date_finish', $date_finish);
        }

        if($query_search){
            $qb->select('n', 'vk_group', 'photos', 'COUNT(views.id) as cnt_views', $query_search . ' as relevant');
            $qb->andWhere($query_search . ">0")
                ->orderBy('relevant', 'DESC');
        }

        $query = $qb->getQuery();

        if($is_need_result){
            return $query->execute();
        }

        return $query;
    }

    public function getNewsByNewsIdAndVkId($news_id, $group_id){
        $res = $this->getOneNews($news_id, $group_id);
        return $res->getOneOrNullResult();
    }

    public function getNewsBySlug($slug, $checkDeleted = 1)
    {
        $res = $this->createQueryBuilder('n')
            ->where('n.slug=:slug')
            ->leftJoin('n.vk_group', 'vk_group')
            ->setParameter(':slug', $slug)
        ;

        if($checkDeleted){
            $res->andWhere('n.deleted=:deleted')
                ->setParameter(':deleted', 0);
        }


        return $res->getQuery()->getOneOrNullResult();
    }

    public function getQueryBuilderForViewCounter()
    {
        $qb_pictures = $this->_em->createQueryBuilder()
            ->select('COUNT(vc.id)')
            ->from('AppBundle\Entity\ViewCounter', 'vc')
            ->where('vc.news=n.id');
        return $qb_pictures;
    }

    /**
     * Get popular news
     *
     * @return mixed
     */
    public function getPopularNews()
    {
        $qb_pictures = $this->getQueryBuilderForViewCounter();
        $qb = $this->createQueryBuilder('n')
            ->select('n.id as id')
            ->leftJoin('n.category', 'category')
            ->andWhere('n.news_vk_link<>\'\'  AND n.deleted=0')
            ->andWhere('n.news_title<>\'\'')
            ->andWhere('category.indentity<>\'discount\'')
            ->orderBy('cnt_views', 'DESC');
        $qb->select('n.id as id', '('.$qb_pictures->getDQL().') as cnt_views');

        $date_start = new \DateTime();
        $date_start->sub(new \DateInterval('P4D'));
        $qb ->andWhere('n.news_date_time>=:date_start')
            ->setParameter(':date_start', $date_start->format('Y-m-d 00:00:00'));

        $date_finish = new \DateTime();
        $qb ->andWhere('n.news_date_time<=:date_finish')
            ->setParameter(':date_finish', $date_finish->format('Y-m-d 23:59:00'));

        $qb->setMaxResults(8);

        return $qb->getQuery()->execute();
    }

    public function getListOfNewsQuery($date_start, $date_finish, array $groups, $query = '')
    {
        $qb_pictures = $this->getQueryBuilderForViewCounter();

        //AND photos.id IS NOT NULL
        $qb = $this->createQueryBuilder('n')
            ->leftJoin('n.vk_group', 'vk_group')
            ->leftJoin('n.photos', 'photos')
            ->leftJoin('n.category', 'category')
            ->andWhere('n.news_vk_link<>\'\'  AND n.deleted=0')
            ->andWhere('n.news_title<>\'\'')
            ->andWhere('vk_group.deleted=0')
            ->andWhere('category.indentity<>\'discount\'')
            ;

        if($query){
            $qb->select(
                'partial n.{id,news_title,news_description,news_id,news_site_link,news_vk_link,news_date,slug}',
//                'n',
                'vk_group', 'photos', '('.$qb_pictures->getDQL().') as cnt_views', $query . ' as relevant')
                ->andWhere($query . ">0")
                ->orderBy('relevant', 'DESC');
        }else{
            $qb->select(
                'partial n.{id,news_title,news_description,news_id,news_site_link,news_vk_link,news_date, slug}',
//                'n',
                'vk_group', 'photos', '('.$qb_pictures->getDQL().') as cnt_views');
        }

        if(count($groups)){
            $qb->andWhere($qb->expr()->in('vk_group.id', $groups));
        }

        if($date_start){
            $qb ->andWhere('n.news_date_time>=:date_start')
                ->setParameter(':date_start', $date_start);
        }
        if($date_finish){
            $qb ->andWhere('n.news_date_time<=:date_finish')
                ->setParameter(':date_finish', $date_finish);
        }

        $qb->orderBy('n.news_date', 'DESC');

        if (!$date_start && !$query) {
            $date_start_def = new \DateTime();
            $date_start_def->sub(new \DateInterval('P3D'));
            $qb ->andWhere('n.news_date_time>:date_start_default')
                ->setParameter(':date_start_default', $date_start_def);
        }

        return $qb->getQuery();
    }

    public function getWrongNews(){
        $qb = $this->createQueryBuilder('n')
            ->where('n.news_title=\'\' AND n.news_description=\'\'')
            ->orderBy('n.news_date', 'DESC')
            ->setMaxResults(30);

        return $qb->getQuery()->execute();
    }

    public function getNewsWithoutSlug($limit, $offset)
    {
        $qb = $this->createQueryBuilder('n')
            ->where('n.slug=\'\' OR n.slug IS NULL')
            ->orderBy('n.createdAt', 'DESC')
            ->setMaxResults($limit)
        ->setFirstResult($offset);

        return $qb->getQuery()->execute();
    }
}
