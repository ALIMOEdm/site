<?php
namespace AppBundle\Services;

use AppBundle\Entity\DiscountNews;
use AppBundle\Entity\News;
use AppBundle\Entity\NewsPicture;
use AppBundle\Util\Agro22;
use AppBundle\Util\AifAltay;
use AppBundle\Util\Altaisport;
use AppBundle\Util\AltapressParser;
use AppBundle\Util\AmicParser;
use AppBundle\Util\Ap22;
use AppBundle\Util\ASU;
use AppBundle\Util\BarnaulFm;
use AppBundle\Util\BarnaulMe;
use AppBundle\Util\Capitalist;
use AppBundle\Util\Culture22;
use AppBundle\Util\Doc22;
use AppBundle\Util\Ffprom;
use AppBundle\Util\KPParser;
use AppBundle\Util\MVDRF22;
use AppBundle\Util\MyAltay;
use AppBundle\Util\NashiNovostiTv;
use AppBundle\Util\News\NewsFiltration;
use AppBundle\Util\NewsPreview\FacebookStatis;
use AppBundle\Util\NewsPreview\NewsPreview;
use AppBundle\Util\PolitSibRu;
use AppBundle\Util\Rest22;
use AppBundle\Util\Sentences\SentenceWorker;
use AppBundle\Util\SibfoutMvd;
use AppBundle\Util\TwitterStatist;
use AppBundle\Util\VkRequests;
use AppBundle\Util\VKStatistic;
use Doctrine\ORM\EntityManager;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

/**
 * Class NewsDownloader
 * @package AppBundle\Services
 */
class NewsDownloader
{

    protected $cache_img_size_by_url;
    public $em;
    public $group;
    protected $site_map;
    protected $router;
    public function __construct(EntityManager $entityManager, SiteMap $site_map, $router)
    {
        $this->em = $entityManager;
        $this->site_map = $site_map;
        $this->router = $router;
    }

    public function getNews($group_id, $count, $offset){
        $res = VkRequests::getLatestNews($group_id, $count, $offset);

        if(is_null($res)){
            throw new \Exception('Response is bad ');
        }

        if(!isset($res['response']) || !isset($res['response'][1])){
            throw new \Exception('Response is bad 2');
        }

        $resp = $res['response'][1];
        if($resp['from_id'] != $group_id){
            throw new \Exception('Creator of the news is not an admin');
        }

        return $resp;
    }

    /**
     * Get and save news from VK
     * @param $group_id
     * @param string $group_name
     * @param int $count
     * @param int $offset
     * @return bool
     * @throws \Exception
     */
    public function requestForNew($group_id, $group_name = '', $count = 1, $offset = 0){
        $this->setGroup($group_id);

        var_dump('//////////////////////////');
        var_dump($group_id);

        $images = array();
        $news_repository = $this->em->getRepository('AppBundle:News');

        try{
            $resp = $this->getNews($group_id, $count, $offset);
            $is_pinned = isset($resp['is_pinned']) ? $resp['is_pinned'] : '';
            if($is_pinned){
                $offset++;
                $resp = $this->getNews($group_id, $count, $offset);
            }
        }
        catch(\Exception $e){
            throw new \Exception($e->getMessage());
        }

        $post_text = isset($resp['text']) ? $resp['text'] : '';

        $is_discount = false;
        $dates = array();

        mb_regex_encoding("UTF-8");
        mb_internal_encoding("UTF-8");
        if ($this->group->getGroupId() == -113535804 || $this->group->getGroupId() == -117465274) {
            if (mb_ereg_match('.*–ù–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.*', $post_text)) {
                return false;
            }
            $is_discount = true;
//            $post_text = "‚úîBELWEST –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100% –Ω–∞ –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç—É
//–í –ø–µ—Ä–∏–æ–¥ —Å 14 –∞–≤–≥—É—Å—Ç–∞ –¥–æ 21 —Å–µ–Ω—Ç—è–±—Ä—è 2016 –≥. –≤ —Å–µ—Ç–∏ BELWEST –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–µ–∫–ª–∞–º–Ω–∞—è –∞–∫—Ü–∏—è ¬´BELWEST –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –í–∞—à—É –±–æ–Ω—É—Å–Ω—É—é –∫–∞—Ä—Ç—É¬ª:
//–ü—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ –æ–±—É–≤–∏ –∏–ª–∏ —Å—É–º–æ–∫ –Ω–∞ –±–µ–ª—ã—Ö —Ü–µ–Ω–Ω–∏–∫–∞—Ö 100% —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ –ø–æ —á–µ–∫—É –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ —Å—á–µ—Ç –±–æ–Ω—É—Å–Ω–æ–π –∫–∞—Ä—Ç—ã (1 —Ä—É–±–ª—å = 1 –∞–∫—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–ª).
//–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö BELWEST!
//
//üì±–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ë–∞—Ä–Ω–∞—É–ª–∞!
//–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://play.google.com/store/apps/details?id=com.dwd..
//#TopDiscount #topdiscount #—Ç–æ–ø–¥–∏—Å–∫–æ–Ω—Ç #topdis #TD #—Å–∫–∏–¥–∫–∏–±–∞—Ä–Ω–∞—É–ª #—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ #–±–∞—Ä–Ω–∞—É–ª #barnaul";

//            $post_text = '‚úî1 –æ–∫—Ç—è–±—Ä—è - –î–ï–ù–¨ –®–û–ü–ò–ù–ì–ê –≤ –¢–†–¶ "–û–ì–ù–ò"!
//–¢–æ–ª—å–∫–æ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å 10:00 –¥–æ 21:00 –≤—Å–µ –æ—Ç–¥–µ–ª—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—è—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª—é–±–∏–º—ã–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º!
//–ù–∞ –ø–∞—Ä–∫–æ–≤–∫–µ –¢–†–¶ "–û–ì–ù–ò" —Å–æ—Å—Ç–æ–∏—Ç—Å—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç; –ø–æ–∫–∞–∑ –º–æ–¥–µ–ª–µ–π –æ–¥–µ–∂–¥—ã, –æ–±—É–≤–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –æ—Å–µ–Ω—å-–∑–∏–º–∞/2016; –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø–∏–∑—ã –∏ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π!
////
////üì±–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ë–∞—Ä–Ω–∞—É–ª–∞!
////–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://play.google.com/store/apps/details?id=com.dwd..
////#TopDiscount #topdiscount #—Ç–æ–ø–¥–∏—Å–∫–æ–Ω—Ç #topdis #TD #—Å–∫–∏–¥–∫–∏–±–∞—Ä–Ω–∞—É–ª #—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ #–±–∞—Ä–Ω–∞—É–ª #barnaul';

            //–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
//            $post_text = '‚úîFUNDAY 3=2 –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã!
//–¢–æ–ª—å–∫–æ –¥–æ 26 —Å–µ–Ω—Ç—è–±—Ä—è –≤ FUNDAY –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤—ã–≥–æ–¥–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞! –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã, –Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ, –Ω–æ—Å–∫–∏ –∏ –∫–æ–ª–≥–æ—Ç–∫–∏ - 3 –≤–µ—â–∏ –ø–æ —Ü–µ–Ω–µ 2! –í –∞–∫—Ü–∏–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç –∂–µ–Ω—Å–∫–∏–π, –º—É–∂—Å–∫–æ–π –∏ –¥–µ—Ç—Å–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç! –°–ø–µ—à–∏—Ç–µ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö! FUNa –º–Ω–æ–≥–æ –Ω–µ –±—ã–≤–∞–µ—Ç!
//–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∞–∫—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!
////
////üì±–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ë–∞—Ä–Ω–∞—É–ª–∞!
////–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://play.google.com/store/apps/details?id=com.dwd..
////#TopDiscount #topdiscount #—Ç–æ–ø–¥–∏—Å–∫–æ–Ω—Ç #topdis #TD #—Å–∫–∏–¥–∫–∏–±–∞—Ä–Ω–∞—É–ª #—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ #–±–∞—Ä–Ω–∞—É–ª #barnaul';

//            $post_text = '‚úî–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–µ–Ω—Ç—è–±—Ä—è –æ—Ç ¬´–ú–æ–¥–µ—Ä–Ω¬ª:
//- –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã;
//- –ø–æ–¥–∞—Ä–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∞—Ö;
//- —Å–∫–∏–¥–∫–∏ –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ.
//–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Top Discount
//
//üì±–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ë–∞—Ä–Ω–∞—É–ª–∞!
//–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://play.google.com/store/apps/details?id=com.dwd..
//#TopDiscount #topdiscount #—Ç–æ–ø–¥–∏—Å–∫–æ–Ω—Ç #topdis #TD #—Å–∫–∏–¥–∫–∏–±–∞—Ä–Ω–∞—É–ª #—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ #–±–∞—Ä–Ω–∞—É–ª #barnaul
//';
//
//            $post_text = '–°–ï–ì–û–î–ù–Ø16 –°–ï–ù–¢–Ø–ë–†–Ø - –û–¢–ö–†–´–¢–ò–ï –ø–µ—Ä–≤—ã—Ö –≤ –ê–ª—Ç–∞–π—Å–∫–æ–º –∫—Ä–∞–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ SINSAY CROPP MOHITO HOUS
//';

//            $post_text = ' –í—É—Å—å –°–µ–Ω—Ç—è–±—Ä—å –∏ –æ–∫—Ç—è–±—Ä—å - –û–¢–ö–†–´–¢–ò–ï –ø–µ—Ä–≤—ã—Ö –≤ –ê–ª—Ç–∞–π—Å–∫–æ–º –∫—Ä–∞–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ SINSAY CROPP MOHITO HOUS
//';

//            $post_text =
//            '–ë—É–¥—å –≤ —Ç—Ä–µ–Ω–¥–µ –≤–º–µ—Å—Ç–µ —Å ASKENT Group!
//
//–•–∏—Ç —Å–µ–∑–æ–Ω–∞ ‚Äì —Å—Ç–∏–ª—å–Ω—ã–µ –º—É–∂—Å–∫–∏–µ –∏ –∂–µ–Ω—Å–∫–∏–µ —Ä—é–∫–∑–∞–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π 10% –≤ —Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö ASKENT –∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ø–æ –ø—Ä–æ–º–æ-–∫–æ–¥—É ¬´BACKPACK10SALE¬ª.
//
//–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å 15 –ø–æ 18 —Å–µ–Ω—Ç—è–±—Ä—è 2016 –≥–æ–¥–∞.';

//            $post_text =
//            '–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞! –ê –º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –±—É–¥–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–∏–ª –í–°–ï —É—Å–ª–æ–≤–∏—è:
//–í—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É
//–°–∫–∞—á–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω
//–°–¥–µ–ª–∞–ª —Ä–µ–ø–æ—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ß–ï–†–ï–ó –ü–†–ò–õ–û–ñ–ï–ù–ò–ï —Å–µ–±–µ –Ω–∞ —Å—Ç–µ–Ω—É –≤–∫
//–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –ø–æ—Å—Ç—É:
//–†–æ–∑—ã–≥—Ä—ã—à:
//';
//            $post_text =
//            '–≤—ã–≥–æ–¥–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö Pelican.
//            –° 6 —Å–µ–Ω—Ç—è–±—Ä—è 2016 –≥–æ–¥–∞ –≤ —Å–µ—Ç–∏ —Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ Pelican –∏ Pelican Kids –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è –Ω–∞ –Ω–æ–≤—É—é –æ—Å–µ–Ω–Ω—é—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!.
//–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ 2-—Ö –∏ –±–æ–ª–µ–µ –≤–µ—â–µ–π –∏–∑ –Ω–æ–≤–æ–π –æ—Å–µ–Ω–Ω–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ –∫–∞–∂–¥—É—é –≤—Ç–æ—Ä—É—é –≤–µ—â—å 40.
//–¢–æ—Ä–æ–ø–∏—Ç–µ—Å—å! –ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 26 —Å–µ–Ω—Ç—è–±—Ä—è 2016 –≥–æ–¥–∞.
//            ';

            while (true) {
                if (!preg_match('/#TopDiscount/', $post_text) && $this->group->getGroupId() != -117465274) {
                    $offset++;
                    $resp = $this->getNews($group_id, $count, $offset);
                    if($offset > 5) {
                        return false;
                    }
                    $post_text = isset($resp['text']) ? $resp['text'] : '';
                } else {
                    break;
                }
            }


            $post_text = mb_ereg_replace('[^–∞-—è–ê-–Ø\w\s\.!\/:"\-\(\)=\?\#@<>]+', '', $post_text);
            $post_text = mb_ereg_replace('–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏.*$', '', $post_text);
            $post_text = mb_ereg_replace('–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.*$', '', $post_text);

            $months = array(
                '—Å–µ–Ω—Ç—è–±—Ä' => 9,
                '—è–Ω–≤–∞—Ä' => 1,
                '—Ñ–µ–≤—Ä–∞–ª' => 2,
                '–º–∞—Ä—Ç' => 3,
                '–∞–ø—Ä–µ–ª' => 4,
                '–º–∞–π' => 5,
                '–º–∞—è' => 5,
                '–∏—é–Ω' => 6,
                '–∏—é–ª' => 7,
                '–∞–≤–≥—É—Å—Ç' => 8,
                '–æ–∫—Ç—è–±—Ä' => 10,
                '–Ω–æ—è–±—Ä'=> 11,
                '–¥–µ–∫–∞–±—Ä' => 12
            );


            $months_flipped = array_flip($months);

            $m = array();
            $temp = mb_strtolower($post_text);
            var_dump($temp);
            foreach ($months as $month => $m_number) {
                if (mb_ereg_match('.* '.$month.'.*', $temp)) {
                    var_dump($month);
                    $offset = mb_strpos($temp, $month);
                    $m[] = array(
                        'offset' => $offset,
                        'month_number' => $m_number,
                    );
                }
            }
            if (count($m) > 1) {
                usort($m, function ($a, $b)
                {
                    if ($a['offset'] == $b['offset']) {
                        return 0;
                    }
                    return ($a['offset'] < $b['offset']) ? -1 : 1;
                });
            }

            var_dump($m);
            $date = new \DateTime();

            if (count($m) == 2) {
                $pred_offset = 0;
                foreach ($m as $key => $value) {
                    $len = $value['offset'] + mb_strlen($months_flipped[$value['month_number']]);
                    $substring = mb_strtolower(mb_substr($post_text,0,$len,"UTF-8"));
                    $res = array();
                    $reg_exp = '(.* |^)(\d+.*'.$months_flipped[$value['month_number']].')';
                    mb_ereg($reg_exp, $substring, $res);
                    $day = 1;
                    if (count($res)) {
                        $res_need = isset($res[2]) ? $res[2] : '';
                        $res_2 = array();
                        mb_ereg('\d+', $res_need, $res_2);
                        $day = isset($res_2[0]) ? $res_2[0] : '';
                    } else {
                        if ($key != 0) {
                            $a_date = $date->format('Y')."-".$value['month_number']."-".$date->format('d');
                            $day = date("t", strtotime($a_date));
                        }
                    }
                    $dates[] = array(
                        'day' => $day,
                        'month' => $value['month_number']
                    );
                }
            } elseif (count($m) == 1) {
                //–µ—Å–ª–∏ —É –Ω–∞—Å 1 –º–µ—Å—è—Ü –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
                $value = $m[0];
                $len = $value['offset'] + mb_strlen($months_flipped[$value['month_number']]);
                $substring = mb_strtolower(mb_substr($post_text,0,$len,"UTF-8"));
                // –µ—Å–ª–∏ —É –Ω–∞—Å —á–∏—Å–ª–æ –∏ –º–µ—Å—è—Ü—É(—á—Ç–æ –ª–∏ –±–æ...23 —Å–µ–Ω—Ç—è–±—Ä—è)
                $reg_exp = '(.*[^0-9]|^)((\d+).*'.$months_flipped[$value['month_number']].')';
                $res = array();
                mb_ereg($reg_exp, $substring, $res);
                var_dump($res);
                $day_to = 1;
                $day_from = 1;
                if (count($res)) {
                    $res_need = isset($res[2]) ? $res[2] : '';
                    if ($res_need) {
                        $res_2 = array();
                        mb_ereg('\d+', $res_need, $res_2);
                        $day_to = isset($res_2[0]) ? $res_2[0] : '';
                        //—Ç–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ(—á—Ç–æ —Ç–æ ... —Å 12 –ø–æ 13 —Å–µ–Ω—Ç—è–±—Ä—è)
                        $reg_exp = '(.*[^0-9]|^)(\d\d?)[^0-9]+(\d\d?)[^0-9]*'.$months_flipped[$value['month_number']].'';
                        $res = array();
                        var_dump($substring);
                        mb_ereg($reg_exp, $substring, $res);
                        var_dump($res);
                        if (isset($res[2])) {
                            $day_from = $res[2] ? $res[2] : $day_to;
                            if (!$res[2]) {
                                if (mb_ereg_match('.* –ø–æ .*'.$months_flipped[$value['month_number']], $substring) || mb_ereg_match('.* –¥–æ .*'.$months_flipped[$value['month_number']], $substring)) {
                                    $day_from = (new \DateTime())->format('d');
                                }
                            }
                        } else {
                            $day_from = $day_to;
                        }
                    } else {
                        $a_date = $date->format('Y')."-".$value['month_number']."-".$date->format('d');
                        $day_to = date("t", strtotime($a_date));
                    }
                } else {
                    $a_date = $date->format('Y')."-".$value['month_number']."-".$date->format('d');
                    $day_to = date("t", strtotime($a_date));
                }
                $dates[] = array(
                    'day' => $day_from,
                    'month' => $value['month_number']
                );
                $dates[] = array(
                    'day' => $day_to,
                    'month' => $value['month_number']
                );

            } else {
                $dates[] = array(
                    'day' => (new \DateTime())->sub(new \DateInterval('P5D'))->format('d'),
                    'month' => (new \DateTime())->format('m')
                );
                $dates[] = array(
                    'day' => (new \DateTime())->add(new \DateInterval('P10D'))->format('d'),
                    'month' => (new \DateTime())->format('m')
                );
            }

            $cur_month = (new \DateTime())->format('m');
            $cur_year = (new \DateTime())->format('Y');
            $dates[0]['year'] = $cur_year;
            $dates[1]['year'] = $cur_year;
            if ((int)$dates[1]['month'] < $cur_month && (int)$dates[0]['month'] > $cur_month) {
                $dates[0]['year'] = $cur_year;
                $dates[1]['year'] = $cur_year + 1;
            } else if ((int)$dates[1]['month'] < $cur_month && (int)$dates[0]['month'] < $cur_month) {
                $dates[0]['year'] = $cur_year + 1;
                $dates[1]['year'] = $cur_year + 1;
            }

            $dates[0]['time'] = '00:00:00';
            $dates[1]['time'] = '23:59:59';

        }

        $post_text = preg_replace('/#[^ ]+/', '', $post_text);
        $post_text = preg_replace('/<script[^>]*>(.*?)<\/script>/', '', $post_text);
        $post_type = isset($resp['post_type']) ? $resp['post_type'] : '';
        $post_date = isset($resp['date']) ? $resp['date'] : '';
        $post_id = isset($resp['id']) ? $resp['id'] : '';

        if($news_repository->checkNewsExists($post_id, $group_id)){
            throw new \Exception('The news already exists');
        }

        $news = new News();
        $news->setNewsDate($post_date);
        $news->setNewsId($post_id);
        /**
         * select and then remove all references
         */
        preg_match_all('/(http(s?):\/\/[^ ]*)/',$post_text, $matches);
        $post_text = preg_replace('/(http(s?):\/\/[^ ]*)/', '', $post_text );
        $post_text = preg_replace('/[|]+[ ]*.*/', '', $post_text );
        $post_text = preg_replace('/\[club[^\]]*\]/', '', $post_text );
        $post_text = preg_replace('/(<(br\/?)>){2,}/', '.<br/>', $post_text );
        $post_text = preg_replace('/[.]+/', '.', $post_text );
        $post_text = trim($post_text);



        $text = '';
        $news_prev = new NewsPreview();
        $news_info = array();
        $news_external_link = '';
        var_dump($post_text);
        if(count($matches)){
            foreach($matches as $m){
                $m = isset($m[0]) && !empty($m[0]) ? $m[0] : '';
                if($m){
                    $m = $this->getOriginUrlFromRedirect($m);
                    $text = $this->parseNewsSite($m);

//                    if(count($news_info)){
//                        $f_cnt = FacebookStatis::getNewsCnt($m);
//                        $vk_cnt = VKStatistic::getNewsCnt($m);
//                        $tw_cnt = TwitterStatist::getNewsCnt($m);
//                    }
                }
                if($text && strlen($text) > 200){
                    $news_info = $news_prev->getPrev($m);
                    $news_external_link = $m;
                    break;
                }
            }

        }

        $post_text = preg_replace('/(http(s?):\/\/[^ ]*)/','', $post_text);
        if(mb_strlen($post_text) > 180){
            $news->setNewsDescription($post_text);
            //get first sentence from long text
            $title = SentenceWorker::getFirstSentence($post_text);
            //replace <br>
            $title = preg_replace('/(<br[^>]*>\s*){1,}/', '. ', $title);
            $news->setNewsTitle($title);
        }else{
            $title = preg_replace('/(<br[^>]*>\s*){1,}/', '. ', $post_text);
            $news->setNewsTitle($title);
        }

        //—Å–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º—ã —Å—Ç—è–Ω—É–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞, —Ç–æ –ø—É—Å—Ç—å –µ—â–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–µ–∫—Å—Ç –∏–∑ –≤–∫
        $news->setNewsTextOrigin(($post_text));

        if($text){
            $news->setNewsTextParsed(trim($text));
        }
        if(count($news_info)){
            if(isset($news_info['title']) && trim($news_info['title'])){
                $news->setNewsTitle($news_info['title']);
            }
            if(isset($news_info['description']) && trim($news_info['description'])){
                $news->setNewsDescription($news_info['description']);
            }
            if(isset($news_info['image']) && trim($news_info['image'])){
                $picture = new NewsPicture();
                $picture->setUrl($news_info['image']);
                $size = $this->getImageSize($news_info['image']);
                $picture->setSize($size);
                $size = $this->getImageSizeInt($news_info['image']);
                $picture->setSizeInt($size);
                $news->addPhoto($picture);
                $picture->setNews($news);
                $images[] = $picture;
//                $this->em->persist($picture);
            }
            $news->setNewsSiteLink($news_info['url']);
        }

        if($news_external_link){
            $news->setNewsSiteLink($news_external_link);
        }

        $gr_url = $this->getGroupUrl($group_id);
        $gr_url .= '?w=wall'.$group_id.'_'.$news->getNewsId();
        $news->setNewsVkLink($gr_url);
        $attachments = isset($resp['attachments']) ? $resp['attachments'] : array();
        if(count($attachments)){
            foreach($attachments as $att){
                if($att['type'] == 'photo'){
                    $ph = $att['photo'];
                    $picture = new NewsPicture();

                    $url = '';
                    if(isset($ph['src_xxbig'])){
                        $url = $ph['src_xxbig'];
                    }elseif(isset($ph['src_xbig'])){
                        $url = $ph['src_xbig'];
                    }elseif(isset($ph['src_big'])){
                        $url = $ph['src_big'];
                    }elseif(isset($ph['src'])){
                        $url = $ph['src'];
                    }
                    if (!$url || !$this->checkRemoteFile($url)) {
                        continue;
                    }
                    $picture->setUrl($url);

                    if($url){
                        $size = $this->getImageSize($url);
                        $picture->setSize($size);
                        $size = $this->getImageSizeInt($url);
                        $picture->setSizeInt($size);
                        $news->addPhoto($picture);
                        $picture->setNews($news);
                        $images[] = $picture;
                    }
                }
                elseif($att['type'] == 'video'){
                    $vi = $att['video'];
                    if(!$news->getNewsTitle()) {
                        if(isset($vi['title']) && trim($vi['title'])){
                            $news->setNewsTitle($vi['title']);
                        }
                        if(isset($vi['description']) && trim($vi['description'])){
                            $news->setNewsDescription($vi['description']);
                        }
                    }

                    $picture = new NewsPicture();

                    $url = '';
                    if(isset($vi['image_xbig'])){
                        $url = $vi['image_xbig'];
                    }elseif(isset($vi['image_big'])){
                        $url = $vi['image_big'];
                    }elseif(isset($vi['image_small'])){
                        $url = $vi['image_small'];
                    }elseif(isset($vi['image'])){
                        $url = $vi['image'];
                    }
                    if (!$url || !$this->checkRemoteFile($url)) {
                        continue;
                    }
                    $picture->setUrl($url);

                    if($url){
                        $size = $this->getImageSize($url);
                        $picture->setSize($size);
                        $size = $this->getImageSizeInt($url);
                        $picture->setSizeInt($size);
                        $news->addPhoto($picture);
                        $picture->setNews($news);
                        $images[] = $picture;
                    }

                }
                elseif($att['type'] == 'link'){

                    $link = $att['link'];

                    $text_2 = $this->parseNewsSite($link['url']);

                    if($text_2 && strlen($text_2) > 300 && !$text){
                        $news->setNewsTextParsed(trim($text_2));
                    }

                    if(!$news->getNewsTitle()) {
                        if(isset($link['title']) && trim($link['title'])){
                            $news->setNewsTitle($link['title']);
                        }
                        if(isset($link['description']) && trim($link['description'])){
                            $news->setNewsDescription($link['description']);
                        }
                        $news->setNewsSiteLink($link['url']);
                    }

                    $picture = new NewsPicture();
                    $url = '';
                    if(isset($link['image_src'])){
                        $url = $link['image_src'];
                    }
                    if(isset($link['image_big'])){
                        $url = $link['image_big'];
                    }
                    if (!$url || !$this->checkRemoteFile($url)) {
                        continue;
                    }
                    $picture->setUrl($url);
                    if($url){
                        $size = $this->getImageSize($url);
                        $picture->setSize($size);
                        $size = $this->getImageSizeInt($url);
                        $picture->setSizeInt($size);
                        $news->addPhoto($picture);
                        $picture->setNews($news);
                        $images[] = $picture;
                    }
                }

            }
        }

        if($news->getNewsTitle()){
            if(!NewsFiltration::isValidText($news->getNewsTitle())){
                return false;
            }
            $this->group->addNews($news);
            $news->setVkGroup($this->group);
            $news->setCategory($this->group->getCategory());
            $this->em->persist($news);
//            var_dump('news_title');
//            var_dump($news->getNewsTitle());
            foreach($images as $p){
                $this->em->persist($p);
            }

            if ($is_discount) {
                $discountNews = new DiscountNews();
                $discountNews->setDateStart(new \DateTime($dates[0]['year'].'-'
                                            .$dates[0]['month'].'-'.
                                            $dates[0]['day'].' '.
                                            $dates[0]['time']));
                $discountNews->setDateFinish(new \DateTime($dates[1]['year'].'-'
                    .$dates[1]['month'].'-'.
                    $dates[1]['day'].' '.
                    $dates[1]['time']));
                $discountNews->setNews($news);
                $this->em->persist($discountNews);
            }
            $this->em->flush();

            // Refresh siteMap
            $url = $this->router->generate('one_news_router', ['gr_news_id'=> $news->getNewsIdFunc()], UrlGeneratorInterface::ABSOLUTE_URL);
            $this->site_map->addToSiteMap($url);

            return true;
        }
        return false;
    }

    /**
     * Barnaul Parse News site
     * @param $url
     * @return string
     */
    function parseNewsSite($url){
        $m = $url;
        $text = '';
        if(preg_match('/sibfout.mvd.ru/i', $m) || preg_match('/22.mvd.ru/i', $m)){
            $mvd = new SibfoutMvd();
            $r = $mvd->getArticle($m);
            $text = $mvd->parse($r);
        }elseif(preg_match('/amic.ru/i', $m)){
            $amic = new AmicParser();
            $r = $amic->getArticle($m);
            $text = $amic->parse($r);
        }elseif(preg_match('/altapress.ru/i', $m)){
            $altpr = new AltapressParser();
            $r = $altpr->getArticle($m);
            $text = $altpr->parse($r);
        }elseif(preg_match('/asu.ru/i', $m)){
            $asu = new ASU();
            $r = $asu->getArticle($m);
            $text = $asu->parse($r);
        }elseif(preg_match('/ffprom22.ru/i', $m)){
            $ff = new Ffprom();
            $r = $ff->getArticle($m);
            $text = $ff->parse($r);
        }elseif(preg_match('/doc22.ru/i', $m)){
            $doc = new Doc22();
            $r = $doc->getArticle($m);
            $text = $doc->parse($r);
        }elseif(preg_match('/culture22.ru/i', $m)){
            $cult = new Culture22();
            $r = $cult->getArticle($m);
            $text = $cult->parse($r);
        }elseif(preg_match('/barnaul.me/i', $m)){
            $brn_me = new BarnaulMe();
            $r = $brn_me->getArticle($m);
            $text = $brn_me->parse($r);
        }elseif(preg_match('/rest22.ru/i', $m)){
            $rest = new Rest22();
            $r = $rest->getArticle($m);
            $text = $rest->parse($r);
        }elseif(preg_match('/altaisport.ru/i', $m)){
            $alt_sport = new Altaisport();
            $r = $alt_sport->getArticle($m);
            $text = $alt_sport->parse($r);
        }elseif(preg_match('/altagro22.ru/i', $m)){
            $agro = new Agro22();
            $r = $agro->getArticle($m);
            $text = $agro->parse($r);
        }elseif(preg_match('/barnaul.fm/i', $m)){
            $agro = new BarnaulFm();
            $r = $agro->getArticle($m);
            $text = $agro->parse($r);
        }elseif(preg_match('/ap22.ru/i', $m)){
            $ap_22 = new Ap22();
            $r = $ap_22->getArticle($m);
            $text = $ap_22->parse($r);
        }elseif(preg_match('/kp.ru/i', $m)){
            $kp = new KPParser();
            $r = $kp->getArticle($m);
            $text = $kp->parse($r);
        }elseif(preg_match('/myaltai.com/i', $m)){
            $malt = new MyAltay();
            $r = $malt->getArticle($m);
            $text = $malt->parse($r);
        }elseif(preg_match('/kapitalist.tv/i', $m)){
            $capitalist = new Capitalist();
            $r = $capitalist->getArticle($m);
            $text = $capitalist->parse($r);
        }elseif(preg_match('/–º–≤–¥.—Ä—Ñ/i', $m)){
            $mvd = new MVDRF22();
            $r = $mvd->getArticle($m);
            $text = $mvd->parse($r);
        }elseif(preg_match('/altai.aif.ru/i', $m)){
            $aif = new AifAltay();
            $r = $aif->getArticle($m);
            $text = $aif->parse($r);
        }elseif(preg_match('/politsib.ru/i', $m)){
            $politsib = new PolitSibRu();
            $r = $politsib->getArticle($m);
            $text = $politsib->parse($r);
        }elseif(preg_match('/nashinovosti.tv/i', $m)){
            $politsib = new NashiNovostiTv();
            $r = $politsib->getArticle($m);
            $text = $politsib->parse($r);
        }
        return $text;
    }

    public function setGroup($group_id){
        $this->group = $this->em->getRepository('AppBundle:VKGroup')->findOneBy(array('group_id' => $group_id));
    }

    public function getGroupUrl(){
        return $this->group->getGroupUrl();
    }

    /**
     * Classification images by size
     * @param $url
     * @return string
     */
    public function getImageSize($url){
        if (!$this->checkRemoteFile($url)) {
            return 'small';
        }
        if(!isset($this->cache_img_size_by_url[$url])){
            $this->cache_img_size_by_url[$url] = getimagesize($url);
        }
        $type = $this->cache_img_size_by_url[$url];
        $type = $type[0];
        if($type < 151){
            return 'small';
        }
        if($type < 250){
            return 'medium';
        }
        if($type < 350){
            return 'xmedium';
        }
        if($type < 450){
            return 'xxmedium';
        }
        if($type < 550){
            return 'xxxmedium';
        }
        if($type < 650){
            return 'big';
        }
        if($type < 750){
            return 'xbig';
        }
        else{
            return 'xxbig';
        }
    }

    function checkRemoteFile($url)
    {
        $timeout = 5; //timeout seconds

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        // don't download content
        curl_setopt($ch, CURLOPT_NOBODY, 1);
        curl_setopt($ch, CURLOPT_FAILONERROR, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt ($ch, CURLOPT_TIMEOUT, $timeout);

        return (curl_exec($ch)!==FALSE);
    }

    /**
     * Classification images by size
     * @param $url
     * @return int
     */
    public function getImageSizeInt($url){
        if (!$this->checkRemoteFile($url)) {
            return 1;
        }
        if(!isset($this->cache_img_size_by_url[$url])){
            $this->cache_img_size_by_url[$url] = getimagesize($url);
        }
        $type = $this->cache_img_size_by_url[$url];
        $type = $type[0];
        if($type < 151){
            return 1;
        }
        if($type < 250){
            return 2;
        }
        if($type < 350){
            return 3;
        }
        if($type < 450){
            return 4;
        }
        if($type < 550){
            return 4;
        }
        if($type < 650){
            return 5;
        }
        if($type < 750){
            return 6;
        }
        else{
            return 7;
        }
    }

    public function requestForNews(){
        $cnt = 0;
        while($cnt < 7) {
            $cnt++;
            $group = $this->em->getRepository('AppBundle:VKGroup')->getNext();
            if (count($group)) {
                $group = $group[0];
                $group->setRequestedDate(new \DateTime());
                $this->em->persist($group);
                $this->em->flush();
                try{
                    $this->requestForNew($group->getGroupId(), $group->getGroupName());
                }catch (\Exception $e){
                    echo $e->getMessage();
                }
            }
        }
    }

    /**
     * –ü—ã—Ç–∞–µ–º—Å—è –æ–±–æ–π—Ç–∏ –≤—Å—è–∫–∏–µ –º–∏–Ω–∏–º–∏–∑–∞—Ç–æ—Ä—ã —Å—Å—ã–ª–æ–∫
     *
     * @param $url
     * @return mixed
     */
    public function getOriginUrlFromRedirect($url)
    {
        $counter = 0;
        while (true) {
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            $res = curl_exec($ch);
            $info = curl_getinfo($ch);
            if (isset($info['http_code']) && ($info['http_code'] == 302 || $info['http_code'] == 301)) {
                $url = $info['redirect_url'];
            } elseif (isset($info['http_code'])
                && ($info['http_code'] < 300 || $info['http_code'] <= 400 )
            ) {
                return $url;
            }
            $counter++;
            if($counter > 30) {
                break;
            }
        }
        return $url;

    }
}